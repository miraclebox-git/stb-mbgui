<!--suppress XmlUnboundNsPrefix -->
<wizard>
		<!--<step id="start">
			<condition>
from Plugins.SystemPlugins.NetworkWizard.NetworkWizard import config
self.condition = config.misc.networkwizard.hasnetwork.value
			</condition>
			<text value="Would you like to check for available updates for your MiracleBox ?" />
			<config screen="InstallWizard" module="InstallWizard" args="3" type="ConfigList" />
			<code>
self["tunera"].hide()  
self["tunerb"].hide()  
self["tunerc"].hide()  
self["tunerd"].hide()  
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="nima">-->
		<step id="start">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty
			</condition>
			<text value="It is now time to configure your first tuner. Please set up tuner A" />
			<displaytext value="Set up tuner A" />
			<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
			<code>
self["tunera"].show()
self["tunerb"].hide()
self["tunerc"].hide()
self["tunerd"].hide()
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimb">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty
			</condition>
			<text value="It is now time to configure your second tuner. Please set up tuner B" />
			<displaytext value="Set up tuner B" />
			<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
			<code>
self["tunera"].hide()
self["tunerb"].show()
self["tunerc"].hide()
self["tunerd"].hide()
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimc">
			<condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and not isFBCLink(nimmanager.nim_slots[2])
			</condition>
			<text value="It is now time to configure your third tuner. Please set up tuner C" />
			<displaytext value="Set up tuner C" />
			<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
			<code>
self["tunera"].hide()
self["tunerb"].hide()
self["tunerc"].show()
self["tunerd"].hide()
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimd">
			<condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and not isFBCLink(nimmanager.nim_slots[3])
			</condition>
			<text value="It is now time to configure your fourth tuner. Please set up tuner D" />
			<displaytext value="Set up tuner D" />
			<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
			<code>
self["tunera"].hide()
self["tunerb"].hide()
self["tunerc"].hide()
self["tunerd"].show()
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nime">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 4 and not nimmanager.nim_slots[4].empty and not isFBCLink(nimmanager.nim_slots[4])
            </condition>
			<text value="Please set up tuner E" />
			<displaytext value="Please set up tuner E" />
			<config screen="NimSetup" module="Satconfig" args="4" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimf">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 5 and not nimmanager.nim_slots[5].empty and not isFBCLink(nimmanager.nim_slots[5])
            </condition>
			<text value="Please set up tuner F" />
			<displaytext value="Please set up tuner F" />
			<config screen="NimSetup" module="Satconfig" args="5" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimg">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 6 and not nimmanager.nim_slots[6].empty and not isFBCLink(nimmanager.nim_slots[6])
            </condition>
			<text value="Please set up tuner G" />
			<displaytext value="Please set up tuner G" />
			<config screen="NimSetup" module="Satconfig" args="6" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimh">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 7 and not nimmanager.nim_slots[7].empty and not isFBCLink(nimmanager.nim_slots[7])
            </condition>
			<text value="Please set up tuner H" />
			<displaytext value="Please set up tuner H" />
			<config screen="NimSetup" module="Satconfig" args="7" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimi">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 8 and not nimmanager.nim_slots[8].empty and not isFBCLink(nimmanager.nim_slots[8])
            </condition>
			<text value="Please set up tuner I" />
			<displaytext value="Please set up tuner I" />
			<config screen="NimSetup" module="Satconfig" args="8" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimj">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 9 and not nimmanager.nim_slots[9].empty and not isFBCLink(nimmanager.nim_slots[9])
            </condition>
			<text value="Please set up tuner J" />
			<displaytext value="Please set up tuner J" />
			<config screen="NimSetup" module="Satconfig" args="9" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
		<step id="channels">
			<condition>
from Components.NimManager import nimmanager
from Plugins.SystemPlugins.NetworkWizard.NetworkWizard import config
self.condition = nimmanager.somethingConnected() and config.misc.networkwizard.hasnetwork.value
			</condition>
			<text value="Do you want to install a channel list?" />
			<displaytext value="Channel list" />
			<config screen="InstallWizard" module="InstallWizard" args="1" type="ConfigList" />
			<code>
self["tunera"].hide()
self["tunerb"].hide()
self["tunerc"].hide()
self["tunerd"].hide()
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>

		<step id="scanquestion">
			<text value="Do you want to do a service scan?" />
			<displaytext value="Service scan" />
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected()
			</condition>
			<list>
				<listentry caption="No, scan later manually" step="reboot" />
				<listentry caption="Yes, do an automatic scan now" step="scan" />
				<listentry caption="Yes, do a manual scan now" step="manualscan" />
			</list>
		</step>
		<step id="scan" nextstep="reboot">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected()
			</condition>
			<text value="What do you want to scan?" />
			<displaytext value="Service scan" />
			<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="manualscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected()
			</condition>
			<text value="What do you want to scan?" />
			<displaytext value="Service scan" />
			<config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="nextscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected()
			</condition>
			<text value="Do you want to do another manual service scan?" />
			<displaytext value="Service scan" />
			<list>
				<listentry caption="No, scan later manually" step="reboot" />
				<listentry caption="Yes, do another manual scan now" step="manualscan" />
			</list>
		</step>
		<step id="reboot">
			<text value="Do you want to restart %s %s to save all settings ?" />
			<displaytext value="Wizard" />
			<list>
				<listentry caption="No, I will do it later." step="end" />
				<listentry caption="Yes, do it now" step="reboot_now" />
			</list>
		</step>
		<step id="reboot_now" laststep="true">
			<code>
from Screens.Standby import TryQuitMainloop
from Screens.StartWizard import *
config.misc.firstrun.value = 0
config.misc.firstrun.save()
configfile.save()

self.session.open(TryQuitMainloop, 2)
			</code>
		</step>
		<step id="end" laststep="true">
			<condition>
self.condition = self.isLastWizard
			</condition>
			<text value="Thank you for using the wizard. Your %s %s is now ready to use.\nPlease press OK to start using your %s %s." />
			<displaytext value="Your %s %s is now ready to use." />
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
</wizard>
